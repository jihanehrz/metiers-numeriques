# import Address, AddressInput, AddressesResult from "addresses.graphql"
# import ArchivedJob, ArchivedJobInput, ArchivedJobsResult from "archived-jobs.graphql"
# import Contact, ContactInput, ContactsResult from "contacts.graphql"
# import File, FileInput, FilesResult from "files.graphql"
# import Institution, InstitutionInput, InstitutionsResult, PublicInstitutionsResult from "institutions.graphql"
# import Job, JobInput, JobsResult, PublicJobsResult from "jobs.graphql"
# import Lead, LeadInput, LeadsResult from "leads.graphql"
# import LegacyEntity, LegacyEntityInput, LegacyEntitiesResult from "legacy-entities.graphql"
# import LegacyService, LegacyServiceInput, LegacyServicesResult from "legacy-services.graphql"
# import Profession, ProfessionInput, ProfessionsResult from "professions.graphql"
# import Recruiter, RecruiterInput, RecruitersResult from "recruiters.graphql"
# import User, UserInput, UsersResult from "users.graphql"

scalar DateTime
scalar JSONObject

type Query {
  getAddress(id: String!): Address
  getAddresses(
    pageIndex: Int!
    perPage: Int!
    query: String
  ): AddressesResult!

  getArchivedJob(id: String!): ArchivedJob
  getArchivedJobs(
    pageIndex: Int!
    perPage: Int!
    query: String
  ): ArchivedJobsResult!

  getContact(id: String!): Contact
  getContacts(
    pageIndex: Int!
    perPage: Int!
    query: String
  ): ContactsResult!
  getContactsList: [Contact!]!

  getFile(id: String!): File
  getFiles(
    pageIndex: Int!
    perPage: Int!
    query: String
  ): FilesResult!

  getInstitution(id: String!): Institution
  getInstitutions(
    pageIndex: Int!
    perPage: Int!
    query: String
  ): InstitutionsResult!
  getInstitutionsList: [Institution!]!
  getAllInstitutions: [Institution!]!
  getPublicInstitutions(
    pageIndex: Int!
    perPage: Int!
    query: String
  ): PublicInstitutionsResult!

  getJob(id: String!): Job
  getJobs(
    pageIndex: Int!
    perPage: Int!
    query: String
    state: String
  ): JobsResult!
  getJobsList: [Job!]!
  getAllJobs: [Job!]!
  getPublicJobs(
    contractTypes: [String]
    pageIndex: Int!
    perPage: Int!
    professionId: String
    query: String
    region: String
    remoteStatuses: [String]
  ): PublicJobsResult!

  getLead(id: String!): Lead
  getLeads(
    pageIndex: Int!
    perPage: Int!
    query: String
  ): LeadsResult!

  getLegacyEntity(id: String!): LegacyEntity
  getLegacyEntities(
    pageIndex: Int!
    perPage: Int!
    query: String
  ): LegacyEntitiesResult!
  getLegacyEntitiesList: [LegacyEntity!]!

  getLegacyInstitution(id: String, slug: String): LegacyInstitution
  getLegacyInstitutions(
    pageIndex: Int!
    perPage: Int!
    query: String
  ): LegacyInstitutionsResult!

  getLegacyJob(id: String, slug: String): LegacyJob
  getLegacyJobs(
    pageIndex: Int!
    perPage: Int!
    query: String
    region: String
    source: String
    state: String
  ): LegacyJobsResult!
  getAllLegacyJobs: [LegacyJob!]!
  getPublicLegacyJobs(
    pageIndex: Int!
    perPage: Int!
    query: String
    region: String
  ): LegacyJobsResult!

  getLegacyService(id: String!): LegacyService
  getLegacyServices(
    pageIndex: Int!
    perPage: Int!
    query: String
  ): LegacyServicesResult!
  getLegacyServicesList: [LegacyService!]!

  getProfession(id: String!): Profession
  getProfessions(
    pageIndex: Int!
    perPage: Int!
    query: String
  ): ProfessionsResult!
  getProfessionsList: [Profession!]!

  getRecruiter(id: String!): Recruiter
  getRecruiters(
    pageIndex: Int!
    perPage: Int!
    query: String
  ): RecruitersResult!
  getRecruitersList: [Recruiter!]!

  getUser(id: String!): User
  getUsers(
    pageIndex: Int!
    perPage: Int!
    query: String
  ): UsersResult!
}

type Mutation {
  createAddress(input: AddressInput!): Address
  deleteAddress(id: String!): Address
  updateAddress(id: String!, input: AddressInput!): Address

  createArchivedJob(input: ArchivedJobInput!): ArchivedJob
  deleteArchivedJob(id: String!): ArchivedJob
  updateArchivedJob(id: String!, input: ArchivedJobInput!): ArchivedJob

  createContact(input: ContactInput!): Contact
  deleteContact(id: String!): Contact
  updateContact(id: String!, input: ContactInput!): Contact

  createFile(input: FileInput!): File
  deleteFile(id: String!): File
  updateFile(id: String!, input: FileInput!): File

  createInstitution(input: InstitutionInput!): Institution
  deleteInstitution(id: String!): Institution
  updateInstitution(id: String!, input: InstitutionInput!): Institution

  createJob(input: JobInput!): Job
  deleteJob(id: String!): Job
  updateJob(id: String!, input: JobInput!): Job

  deleteLead(id: String!): Lead
  updateLead(id: String!, input: LeadInput!): Job

  createLegacyEntity(input: LegacyEntityInput!): LegacyEntity
  deleteLegacyEntity(id: String!): LegacyEntity
  updateLegacyEntity(id: String!, input: LegacyEntityInput!): LegacyEntity

  createLegacyInstitution(input: LegacyInstitutionInput!): LegacyInstitution
  deleteLegacyInstitution(id: String!): LegacyInstitution
  updateLegacyInstitution(id: String!, input: LegacyInstitutionInput!): LegacyInstitution

  createLegacyJob(input: LegacyJobInput!): LegacyJob
  deleteLegacyJob(id: String!): LegacyJob
  updateLegacyJob(id: String!, input: LegacyJobInput!): LegacyJob

  createLegacyService(input: LegacyServiceInput!): LegacyService
  deleteLegacyService(id: String!): LegacyService
  updateLegacyService(id: String!, input: LegacyServiceInput!): LegacyService

  createProfession(input: ProfessionInput!): Profession
  deleteProfession(id: String!): Profession
  updateProfession(id: String!, input: ProfessionInput!): Profession

  createRecruiter(input: RecruiterInput!): Recruiter
  deleteRecruiter(id: String!): Recruiter
  updateRecruiter(id: String!, input: RecruiterInput!): Recruiter

  deleteUser(id: String!): User
  updateUser(id: String!, input: UserInput!): User
}


type LegacyInstitution {
  id: ID!

  address: String
  challenges: String
  files: [FilesOnLegacyInstitutions]
  fullName: String
  hiringProcess: String
  isPublished: Boolean
  joinTeam: String
  keyNumbers: String
  logoFile: File
  missions: String
  motivation: String
  organization: String
  profile: String
  project: String
  schedule: String
  slug: String!
  socialNetworkUrls: [String]
  testimonial: String
  thumbnailFile: File
  title: String
  value: String
  websiteUrls: [String]
}
type FilesOnLegacyInstitutions {
  legacyInstitutionId: String!
  file: File!
  section: String!
  assignedAt: DateTime!
}

type LegacyInstitutionsResult {
  count: Int!
  data: [LegacyInstitution!]!
  index: Int!
  length: Int!
}

input LegacyInstitutionInput {
  id: String

  address: String
  challenges: String
  fullName: String
  hiringProcess: String
  isPublished: Boolean
  joinTeam: String
  keyNumbers: String
  logoFileId: ID
  missions: String
  motivation: String
  organization: String
  profile: String
  project: String
  schedule: String
  slug: String
  socialNetworkUrls: [String]
  testimonial: String
  thumbnailFileId: ID
  title: String
  value: String
  websiteUrls: [String]

  fileIds: [String]
}

type LegacyJob {
  id: ID

  advantages: String
  conditions: String
  createdAt: DateTime
  department: [String]
  entity: String
  experiences: [String]
  hiringProcess: String
  isMigrated: Boolean
  limitDate: DateTime
  locations: [String]
  mission: String
  more: String
  openedToContractTypes: [String]
  profile: String
  publicationDate: DateTime
  reference: String
  salary: String
  slug: String!
  source: String!
  state: String!
  tasks: String
  team: String
  teamInfo: String
  title: String!
  toApply: String
  updatedAt: DateTime

  legacyService: LegacyService
}

type LegacyJobsResult {
  count: Int!
  data: [LegacyJob!]!
  index: Int!
  length: Int!
}

input LegacyJobInput {
  id: String

  advantages: String
  conditions: String
  department: [String]
  entity: String
  experiences: [String]
  hiringProcess: String
  isMigrated: Boolean
  limitDate: DateTime
  locations: [String]
  mission: String
  more: String
  openedToContractTypes: [String]
  profile: String
  publicationDate: DateTime
  reference: String
  salary: String
  slug: String
  state: String
  source: String
  tasks: String
  team: String
  teamInfo: String
  title: String
  toApply: String

  legacyServiceId: String
}
